###################LOGS##############################

var tsFormat = () => (new Date()).toLocaleDateString();
global.logger = new (winston.Logger)({
    transports:[
        new (winston.transports.Console)({
            timestamp: tsFormat,
            colorize: true,
            level: config['ambiente-log']   ------->lo prende dal vettore config presente nel file di configurazione config.js
            /* qui setto il livello di debug da usare tra
               { error:0, warn:1, info:2, verbose:3, debug:4, silly:5 }
               il più alto comprende anche i più bassi. Esempio:
               se scelgo 'info', i log 'debug' verranno ignorati
            */
        }),
        new (winston.transports.File)({
            filename: `${config['log-dir']}/errors.log`,
            timestamp: tsFormat,
            level: 'error'
            /* solo per quanto riguarda gli errori,
               oltre a scriverli sulla console
               li salvo in un file errors.log
            */
        })
    ]
});

################   ANGULAR  #############   e SERVIZI   ###################################
LATO CLIENTTT
Usare controller per visualizzare cose della pagina--->visualizzazione
        |_____> controlla una particolare view, una certa parte grafica(intera pagina o div)
Richieste a server meglio metterle nei servizi. Servizio non ha scope, non relativo agli scope, tipo classi statiche,
globali, (sorta di controller non relativo a una parte di pagina ma è qualcosa di statico, superiore)
indipendende dalla view, sempre attivo. controllo attivo solo all'apertura di un template/view

Il controller poi richiamerà il servizio. Gli restituisce un dato e lo visualizza.
Servizio pensato per fare operazioni indipendenti dalla vista, il recupero dati è solo uno dei possibili
  utilizzi.
Il servizio, anche lui, va agganciato a un modulo.
Es, utente loggato vale per tutte le pagine, lo gestisco sui servizi, anche cambio controller, cioè view,
l'utente mi rimane.

Controller ha uno scope, posto dove può agire, può essere anche solo una piccola
div <div ng-controller="----------">.....

Servizi possono implementare anche cose esterne.

importare in angular, sia impostare il file sia da definire con parentesi quadre
(guardare dentro servizio, import con [] fatto dentro servizio stesso)


this----> dentro servizio/oggetto si riferisce a servizio/oggetto

----> dentro metodo si riferisce a metodo. Sol: mi salvo l'oggetto dentro altra variabile







// Define the `mealApp` module
var mealApp = angular.module('mealApp', [
  'ngRoute',
  'profile',
  'register',
  'home',
  'login'
  /*'home',
  'movimenti',
  'prestiti',
  'profilo',
  'common'*/ //li ho commentati perchè per ora esistono i file ma sono o vuoti o non contengono i nomi appropriati
  //forse ci vanno anche i widjets. Probabilmente no, credo vadano dentro home e dentro alla pagine che li utilizzano
]);
