/*
// Create a database variable outside of the database connection callback to reuse the connection pool in your app.
var db;

var MONGODB_URI = process.env.MONGODB_URI || dbUrl.url;

// Connect to the database before starting the application server.
mongodb.MongoClient.connect(MONGODB_URI, function (err, database) {
  if (err) {
    console.log(err);
    process.exit(1);
  }

  // Save database object from the callback for reuse.
  db = database;
  console.log("Database connection ready");

  // Initialize the app.
  var server = app.listen(process.env.PORT || 8080, function () {
    var port = server.address().port;
    console.log("App now running on port", port);
  });
});
*/
/*
// STUDENTS API ROUTES BELOW

// Generic error handler used by all endpoints.
function handleError(res, reason, message, code) {
  console.log("ERROR: " + reason);
  res.status(code || 500).json({ "error": message });
}
*/
/*  "/api/v1.0/students"
 *    GET: finds all students
 *    POST: creates a new student
 */
/*
app.get("/api/v1.0/students", function (req, res) {
  console.log("GET students");
  db.collection(STUDENTS_COLLECTION).find({}).toArray(function (err, docs) {
    if (err) {
      handleError(res, err.message, "Failed to get students.");
    } else {
      res.status(200).json(docs);
    }
  });
});

app.post("/api/v1.0/students", function (req, res) {
  console.log("POST students");
  var newStudent = req.body;

  if (!req.body.name) {
    handleError(res, "Invalid user input", "Must provide a name.", 400);
    return;
  }

  db.collection(STUDENTS_COLLECTION).insertOne(newStudent, function (err, doc) {
    if (err) {
      handleError(res, err.message, "Failed to create new to do.");
    } else {
      res.status(201).json(doc.ops[0]);
    }
  });
});
*/
/*  "/api/v1.0/students/:id"
 *    GET: find student by id
 *    PUT: update student by id
 *    DELETE: deletes student by id
 */
/*
app.get("/api/v1.0/students/:id", function (req, res) {
  console.log("GET student");
  db.collection(STUDENTS_COLLECTION).findOne({ _id: new ObjectID(req.params.id) }, function (err, doc) {
    if (err) {
      handleError(res, err.message, "Failed to get student");
    } else {
      res.status(200).json(doc);
    }
  });
});

app.put("/api/v1.0/students/:id", function (req, res) {
  console.log("PUT student");
  var updateDoc = req.body;
  delete updateDoc._id;

  db.collection(STUDENTS_COLLECTION).updateOne({ _id: new ObjectID(req.params.id) }, updateDoc, function (err, doc) {
    if (err) {
      handleError(res, err.message, "Failed to update student");
    } else {
      updateDoc._id = req.params.id;
      res.status(200).json(updateDoc);
    }
  });
});

app.delete("/api/v1.0/students/:id", function (req, res) {
  console.log("DELETE student");
  db.collection(STUDENTS_COLLECTION).deleteOne({ _id: new ObjectID(req.params.id) }, function (err, result) {
    if (err) {
      handleError(res, err.message, "Failed to delete student");
    } else {
      res.status(200).json(req.params.id);
    }
  });
});
*/








/*
da server extrategy



// =======================
// IMPORT DIPENDENZE
// =======================
var express     = require('express');
var app         = express();

var bodyParser  = require('body-parser');// get POST parameteres
var morgan      = require('morgan');     // automatic log of HTTP requests
var Q           = require('q');          // Q promise
var mongoose    = require('mongoose');   // models for Mongo
// Use q. Note that you **must** use `require('q').Promise`.
mongoose.Promise = require('q').Promise;

var config = require('./config');        // get our config file


// =======================
// SETUP GLOBAL LOGGER
// =======================
var winston     = require('winston');
var fs          = require('fs');

// create the log directory if it does not exist
if (!fs.existsSync(config['log-dir']))
   {  fs.mkdirSync(config['log-dir']); }

var tsFormat = () => (new Date()).toLocaleDateString();
global.logger = new (winston.Logger)({
    transports:[
        new (winston.transports.Console)({
            timestamp: tsFormat,
            colorize: true,
            level: config['ambiente-log']
            /* qui setto il livello di debug da usare tra
               { error:0, warn:1, info:2, verbose:3, debug:4, silly:5 }
               il più alto comprende anche i più bassi. Esempio:
               se scelgo 'info', i log 'debug' verranno ignorati
            */
        }),
        /*
        new (winston.transports.File)({
            filename: `${config['log-dir']}/errors.log`,
            timestamp: tsFormat,
            level: 'error'
            /* solo per quanto riguarda gli errori,
               oltre a scriverli sulla console
               li salvo in un file errors.log
            *//*
        })
    ]
});




// =======================
// INIZIALIZZAZIONE SERVER E PACCHETTI
// =======================
var port = process.env.PORT || 8080; // used to create, sign, and verify tokens
mongoose.connect(config.database); // connect to database



// use body parser so we can get info from POST and/or URL parameters
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// use morgan to log requests to the console
app.use(morgan('dev'));  // dev = development



// =======================
// ROUTES BASIC
// =======================
// basic route
app.get('/', function(req, res) {
    res.send('Ciao! benvenuto nelle API GET del tutorial JWT su http://localhost:' + port);
});

app.post('/', function(req, res) {
    res.send('Ciao! benvenuto nelle API POST del tutorial JWT su http://localhost:' + port);
});



// =======================
// ADMIN ROUTES
// =======================
var adminRoutes = require('./routes/admin/admin-index');
app.use('/admin', adminRoutes);   // put /admin as prefix



// =======================
// API ROUTES
// =======================
var apiRoutes = require('./routes/api/api-index');
app.use('/api', apiRoutes);   // put /admin as prefix




// =======================
// start the server ======
// =======================
app.listen(port);
logger.info('server avviato su localhost:' + port);
logger.debug('ambiente di log settato a debug');

*/




/* da stack mean

import mongoose from 'mongoose';
import util from 'util';


// config should be imported before importing any other file
import config from './server/config/config';
import app from './server/config/express';


const debug = require('debug')('express-mongoose-es6-rest-api:index');

// make bluebird default Promise
Promise = require('bluebird'); // eslint-disable-line no-global-assign

// plugin bluebird promise in mongoose
mongoose.Promise = Promise;

// connect to mongo db
const mongoUri = config.mongo.host;
mongoose.connect(mongoUri, { server: { socketOptions: { keepAlive: 1 } } });
mongoose.connection.on('error', () => {
  throw new Error(`unable to connect to database: ${mongoUri}`);
});

// print mongoose logs in dev env
if (config.MONGOOSE_DEBUG) {
  mongoose.set('debug', (collectionName, method, query, doc) => {
    debug(`${collectionName}.${method}`, util.inspect(query, false, 20), doc);
  });
}
// module.parent check is required to support mocha watch
// src: https://github.com/mochajs/mocha/issues/1912

  // listen on port config.port
  app.listen(3001, () => {
    console.info(`server started on port ${3001} (${config.env})`); // eslint-disable-line no-console
  });

export default app;
*//*sds*/
